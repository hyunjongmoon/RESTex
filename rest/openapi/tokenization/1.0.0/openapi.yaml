openapi: 3.0.0
info:
  version: 1.0.0
  title: Tokenization Service
  license:
    name: MIT
servers:
  - url: 'https://tokenization.lightapi.net/v1'
paths:
  '/scheme/{id}':
    get:
      summary: Get a token format scheme by id
      operationId: getSchemeById
      parameters:
        - name: id
          in: path
          required: true
          description: Scheme id
          schema:
            type: string
      security:
        - tokenization_auth:
            - 'scheme.r'
      responses:
        '200':
          description: scheme info in json format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scheme'
              examples:
                response:
                  value:
                    id: 1
                    name: LNT4
                    description: Luhn compliant numeric token retaining the last 4 digits. Used for credit card number
  '/scheme':
    get:
      summary: Get all token format schemes
      operationId: getSchemes
      security:
        - tokenization_auth:
            - 'scheme.r'
      responses:
        '200':
          description: multiple schemes in json array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/scheme'
              examples:
                response:
                  value: 
                    - id: 1
                      name: LNT4
                      description: Luhn compliant numeric token retaining the last 4 digits. Used for credit card
                    - id: 2
                      name: SIN
                      description: Canadian Social Insurance Number. 9 digits. 
  '/{org}/{token}':
    get:
      summary: Detokenize from token to value
      operationId: detokenize
      parameters:
        - name: org
          in: path
          required: true
          description: Organization identifier that map to separate database and cache
          schema:
            type: string
        - name: token
          in: path
          required: true
          description: The token generated in tokenize endpoint
          schema:
            type: string
      security:
        - tokenization_auth:
            - 'token.r'
      responses:
        '200':
          description: value for the token in simple string
          content:
            text/plain:
              schema:
                type: string
              examples:
                response:
                  value: '1234567890'
    delete:
      summary: Delete a token
      operationId: delete
      parameters:
        - name: org
          in: path
          required: true
          description: Organization identifier that map to separate database and cache
          schema:
            type: string
        - name: token
          in: path
          required: true
          description: The token generated in tokenize endpoint
          schema:
            type: string
      security:
        - tokenization_auth: 
            - 'token.w'
      responses:
        '200':
          description: The token is successfully deleted
          content:
            text/plain:
              schema:
                type: string
              examples:
                response:
                  value: '1234567890'
        '404': 
          description: Token is not found
  '/{org}':
    post:
      summary: Tokenize input value to a token, if the value exists, the existing token will be returned
      operationId: tokenize
      parameters:
        - name: org
          in: path
          required: true
          description: Organization identifier that map to seperate database and cache
          schema:
            type: string
      requestBody:
        description: Tokenizer body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tokenizer'
      security:
        - tokenization_auth:
            - 'token.w'
      responses:
        '200':
          description: Expected a token returns with the format specified
          content:
            text/plain:
              schema:
                type: string
              examples:
                response:
                  value: '1234567890'
components:
  securitySchemes:
    tokenization_auth:
      type: oauth2
      description: This API uses OAuth 2 with the client credential grant flow.
      flows:
        clientCredentials:
          tokenUrl: 'https://localhost:6882/token'
          scopes:
            'token.r': Read-only action like detokenize or validate
            'token.w': Write action like tokenize
  schemas:
    tokenizer:
      required:
        - value
        - schemeId
      properties:
        value:
          type: string
        id:
          type: integer
          format: int64
    scheme:
      required:
        - id
        - name
        - description
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
