swagger: '2.0'
info:
  description: >-
    User Management service API is a microserice that used for user management
    on light-portal  built on top of light-4j framework.
  version: 1.0.0
  title: User Management service API
  contact:
    email: stevehu@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: user.networknt.com
basePath: /v1
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /user:
    get:
      description: Return an array of user
      operationId: getAll
      parameters: []
      responses:
        '200':
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      security:
        - user_auth:
            - user.a
      x-accepts: application/json
      x-contentType: application/json
    post:
      description: Return a user object with Id
      operationId: addUser
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/User'
      security:
        - user_auth:
            - user.w
      x-accepts: application/json
      x-contentType: application/json
  '/user/{id}':
    get:
      tags:
        - user
      summary: Find User by ID
      description: Returns a single User
      operationId: getUserById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of User to return
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
      security:
        - user_auth:
            - user.r
    put:
      description: Return the updated user object
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: ID of User to return
          required: true
          type: string
        - in: body
          name: body
          description: new user object for update
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/User'
      security:
        - user_auth:
            - user.w
      x-accepts: application/json
      x-contentType: application/json
    delete:
      tags:
        - user
      summary: delete user by ID
      description: delete a single User
      operationId: deleteUserById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of User to return
          required: true
          type: string
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
      security:
        - user_auth:
            - user.r
            - user.w
  /user/email:
    get:
      description: Return a user by email
      operationId: getByEmail
      parameters:
        - name: email
          in: query
          description: unqiue email of user
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/User'
      security:
        - user_auth:
            - user.r
  /user/name:
    get:
      description: Return a user by user name
      operationId: getByName
      parameters:
        - name: name
          in: query
          description: login name of user
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/User'
      security:
        - user_auth:
            - user.r
      x-accepts: application/json
      x-contentType: application/json
  /user/login:
    put:
      description: User login process
      operationId: loginUser
      parameters:
        - in: body
          name: body
          description: user login form object for login
          required: true
          schema:
            $ref: '#/definitions/LoginForm'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/User'
      security:
        - user_auth:
            - user.r
            - user.w
      x-accepts: application/json
      x-contentType: application/json
  '/user/token/{id}':
    get:
      description: Return the  user object
      operationId: confirmUser
      parameters:
        - name: id
          in: path
          description: The token id for user active
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/User'
      security:
        - user_auth:
            - user.r
            - user.w
      x-accepts: application/json
      x-contentType: application/json
  '/session/{id}':
    get:
      description: Return a session by Id
      operationId: getBySessionId
      parameters:
        - name: id
          in: path
          description: ID of session
          required: true
          type: number
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Session'
      security:
        - session_auth:
            - session.r
      x-accepts: application/json
      x-contentType: application/json
    delete:
      description: Remove a session by Id
      operationId: deleteById
      parameters:
        - name: id
          in: path
          description: ID of session
          required: true
          type: number
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Session not found
      security:
        - session_auth:
            - session.r
            - session.w
      x-accepts: application/json
      x-contentType: application/json
  /session:
    post:
      description: Return a session object with Id
      operationId: createSession
      parameters:
        - in: body
          name: body
          description: Created session object
          required: true
          schema:
            $ref: '#/definitions/Session'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Session'
      security:
        - session_auth:
            - session.r
            - session.w
      x-accepts: application/json
      x-contentType: application/json
securityDefinitions:
  user_auth:
    type: oauth2
    authorizationUrl: 'http://localhost:8080/oauth2/code'
    flow: implicit
    scopes:
      user.r: read user
      user.w: write user
      user.a: admin user
  session_auth:
    type: oauth2
    authorizationUrl: 'http://localhost:8080/oauth2/code'
    flow: implicit
    scopes:
      session.r: read session
      session.w: write session
      session.a: admin session
definitions:
  ContactData:
    type: object
    properties:
      email:
        type: string
        description: email address of the user
      firstName:
        type: string
        description: firstName of the user
      lastName:
        type: string
        description: firstName of the user
      gender:
        type: string
        description: user gender type
        enum:
          - FEMALE
          - MALE
          - UNKNOWN
      birthday:
        type: string
        format: date-time
        description: birthday of the user
  User:
    type: object
    properties:
      id:
        type: string
        description: a UUID generated
      host:
        type: string
        description: user host indicator the organization for user
      screenName:
        type: string
        description: screenName of user
      timezone:
        type: string
        description: timezone name of user
      locale:
        type: string
        description: locale display name of user
      password:
        type: string
        description: raw password of user
      contactData:
        $ref: '#/definitions/ContactData'
  LoginForm:
    type: object
    properties:
      nameOrEmail:
        type: string
        description: user screenName or email for login
      password:
        type: string
        description: user password for user login
      token:
        type: string
        description: token with the user login
  Session:
    type: object
    properties:
      sessionId:
        type: number
        description: a UUID generated
      userId:
        type: number
        description: userId with the session
      token:
        type: string
        description: token with the session
