{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "OAuth2 Services Merged into a Monolithic App",
    "description": "OAuth2 Services with all endpoints in one API.",
    "contact": {
      "email": "stevehu@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "http://oauth2.networknt.com/"
    },
    {
      "url": "https://oauth2.networknt.com/"
    }
  ],
  "paths": {
    "/oauth2/client": {
      "post": {
        "description": "Return a client object",
        "operationId": "createClient",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          }
        },
        "security": [
          {
            "light_oauth2": [
              "oauth.client.w"
            ]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Client"
        }
      },
      "put": {
        "description": "Return the updated client",
        "operationId": "updateClient",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          }
        },
        "security": [
          {
            "light_oauth2": [
              "oauth.client.w"
            ]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Client"
        }
      },
      "get": {
        "description": "Return all clients",
        "operationId": "getAllClient",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Pag size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "clientName",
            "in": "query",
            "description": "Partial clientName for filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Client"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "light_oauth2": [
              "oauth.client.r"
            ]
          }
        ]
      }
    },
    "/oauth2/client/{clientId}": {
      "delete": {
        "description": "Delete a client by Id",
        "operationId": "deleteClient",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid clientId supplied"
          },
          "404": {
            "description": "Client not found"
          }
        },
        "security": [
          {
            "light_oauth2": [
              "oauth.client.w"
            ]
          }
        ]
      },
      "get": {
        "description": "Get a client by Id",
        "operationId": "getClient",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          },
          "400": {
            "description": "Invalid clientId supplied"
          },
          "404": {
            "description": "Client not found"
          }
        },
        "security": [
          {
            "light_oauth2": [
              "oauth.client.r",
              "oauth.client.w"
            ]
          }
        ]
      }
    },
    "/oauth2/code": {
      "get": {
        "description": "Return 302 redirect with authorization code",
        "operationId": "getAuthCode",
        "parameters": [
          {
            "name": "Authorization",
            "description": "encoded username:password mandatory if Basic Authentication is used",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response_type",
            "in": "query",
            "description": "The response type for authorization code",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "code"
              ]
            }
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "The client id for authorization code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "The redirect uri for authorization code",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "The user name for authorization code",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for authorization code in clear text",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "to prevent cross-site request forgery",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "scope of the request",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code_challenge",
            "in": "query",
            "description": "PKCE code challenge",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code_challenge_method",
            "in": "query",
            "description": "PKCE code challenge method",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Successful Operation"
          }
        }
      },
      "post": {
        "description": "Return 302 redirect with authorization code",
        "operationId": "postAuthCode",
        "responses": {
          "302": {
            "description": "Successful Operation"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "j_username": {
                    "description": "User name",
                    "type": "string"
                  },
                  "j_password": {
                    "description": "Password",
                    "type": "string"
                  },
                  "response_type": {
                    "description": "Response type",
                    "type": "string",
                    "enum": [
                      "code"
                    ]
                  },
                  "client_id": {
                    "description": "Client Id",
                    "type": "string"
                  },
                  "redirect_uri": {
                    "description": "Redirect Uri",
                    "type": "string"
                  },
                  "state": {
                    "description": "to prevent cross-site request forgery",
                    "type": "string"
                  },
                  "scope": {
                    "description": "scope of the request",
                    "type": "string"
                  },
                  "code_challenge": {
                    "description": "PKCE code challenge",
                    "type": "string"
                  },
                  "code_challenge_method": {
                    "description": "PKCE code challenge method",
                    "type": "string"
                  }
                },
                "required": [
                  "j_username",
                  "j_password",
                  "response_type",
                  "client_id"
                ]
              }
            }
          }
        }
      }
    },
    "/oauth2/key/{keyId}": {
      "get": {
        "description": "Get a key by Id",
        "operationId": "getKeyById",
        "parameters": [
          {
            "name": "keyId",
            "in": "path",
            "description": "Key Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Key"
                }
              }
            }
          },
          "400": {
            "description": "Invalid keyId supplied"
          },
          "404": {
            "description": "Key not found"
          }
        },
        "security": [
          {
            "light_oauth2": [
              "oauth.key.r",
              "oauth.key.w"
            ]
          }
        ]
      }
    },
    "/oauth2/refresh_token": {
      "get": {
        "description": "Return all refresh tokens",
        "operationId": "getAllRefreshToken",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Pag size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Partial userId for filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RefreshToken"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "light_oauth2": [
              "oauth.refresh_token.r"
            ]
          }
        ]
      }
    },
    "/oauth2/refresh_token/{refreshToken}": {
      "delete": {
        "description": "Delete a refresh token",
        "operationId": "deleteRefreshToken",
        "parameters": [
          {
            "name": "refreshToken",
            "in": "path",
            "description": "Refresh Token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid refresh token supplied"
          },
          "404": {
            "description": "Refresh token not found"
          }
        },
        "security": [
          {
            "light_oauth2": [
              "oauth.refresh_token.w"
            ]
          }
        ]
      },
      "get": {
        "description": "Get a refresh token",
        "operationId": "getRefreshToken",
        "parameters": [
          {
            "name": "refreshToken",
            "in": "path",
            "description": "Refresh token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshToken"
                }
              }
            }
          },
          "400": {
            "description": "Invalid refresh token supplied"
          },
          "404": {
            "description": "Refresh token not found"
          }
        },
        "security": [
          {
            "light_oauth2": [
              "oauth.refresh_token.r",
              "oauth.refresh_token.w"
            ]
          }
        ]
      }
    },
    "/oauth2/service": {
      "post": {
        "description": "Return a service object",
        "operationId": "createService",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          }
        },
        "security": [
          {
            "light_oauth2": [
              "oauth.service.w"
            ]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Service"
        }
      },
      "put": {
        "description": "Return the updated service",
        "operationId": "updateService",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          }
        },
        "security": [
          {
            "light_oauth2": [
              "oauth.service.w"
            ]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Service"
        }
      },
      "get": {
        "description": "Return all services",
        "operationId": "getAllService",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Pag size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "serviceId",
            "in": "query",
            "description": "Partial serviceId for filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Service"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "light_oauth2": [
              "oauth.service.r"
            ]
          }
        ]
      }
    },
    "/oauth2/service/{serviceId}": {
      "delete": {
        "description": "Delete a service by Id",
        "operationId": "deleteService",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid serviceId supplied"
          },
          "404": {
            "description": "Service not found"
          }
        },
        "security": [
          {
            "light_oauth2": [
              "oauth.service.w"
            ]
          }
        ]
      },
      "get": {
        "description": "Get a service by Id",
        "operationId": "getService",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "400": {
            "description": "Invalid serviceId supplied"
          },
          "404": {
            "description": "Service not found"
          }
        },
        "security": [
          {
            "light_oauth2": [
              "oauth.service.r",
              "oauth.service.w"
            ]
          }
        ]
      }
    },
    "/oauth2/token": {
      "post": {
        "description": "JSON object that contains access token",
        "operationId": "postToken",
        "parameters": [
          {
            "name": "authorization",
            "description": "encoded client_id and client_secret pair",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "grant_type": {
                    "type": "string",
                    "enum": [
                      "authorization_code",
                      "client_credentials",
                      "password",
                      "refresh_token",
                      "client_authenticated_user"
                    ]
                  },
                  "client_id": {
                    "description": "used as alternative to authentication header for client authentication",
                    "type": "string"
                  },
                  "client_secret": {
                    "description": "used as alternative to authentication header for client authentication",
                    "type": "string"
                  },
                  "code": {
                    "description": "used in authorization_code to specify the code",
                    "type": "string"
                  },
                  "username": {
                    "description": "mandatory in password grant type",
                    "type": "string"
                  },
                  "password": {
                    "description": "mandatory in password grant type",
                    "type": "string"
                  },
                  "scope": {
                    "description": "used by all flows to specify scope in the access token",
                    "type": "string"
                  },
                  "redirect_uri": {
                    "description": "used in authorization code if code endpoint with rediret_uri",
                    "type": "string"
                  },
                  "refresh_token": {
                    "description": "refresh token used to get another access token",
                    "type": "string"
                  },
                  "code_verifier": {
                    "description": "PKCE code verifier",
                    "type": "string"
                  }
                },
                "required": [
                  "grant_type"
                ]
              }
            }
          }
        }
      }
    },
    "/oauth2/user": {
      "get": {
        "description": "Return all users",
        "operationId": "getAllUsers",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Pag size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Partial userId for filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "light_oauth2": [
              "oauth.user.r"
            ]
          }
        ]
      },
      "post": {
        "description": "Return a user object",
        "operationId": "createUser",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "security": [
          {
            "light_oauth2": [
              "oauth.user.w"
            ]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/User"
        }
      },
      "put": {
        "description": "Return the updated user",
        "operationId": "updateUser",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "security": [
          {
            "light_oauth2": [
              "oauth.user.w"
            ]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/User"
        }
      }
    },
    "/oauth2/user/{userId}": {
      "delete": {
        "description": "Delete a user by Id",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid userId supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "light_oauth2": [
              "oauth.user.w"
            ]
          }
        ]
      },
      "get": {
        "description": "Get a user by Id",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid userId supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "light_oauth2": [
              "oauth.user.r",
              "oauth.user.w"
            ]
          }
        ]
      }
    },
    "/oauth2/password/{userId}": {
      "post": {
        "description": "Reset Password",
        "operationId": "resetPassword",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "light_oauth2": [
              "oauth.user.w"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Password"
              }
            }
          },
          "description": "Password object that needs to be added",
          "required": true
        }
      }
    }
  },
  "components": {
    "requestBodies": {
      "User": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        },
        "description": "User object that needs to be added",
        "required": true
      },
      "Client": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Client"
            }
          }
        },
        "description": "Client object that needs to be added",
        "required": true
      },
      "Service": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Service"
            }
          }
        },
        "description": "Service object that needs to be added",
        "required": true
      }
    },
    "securitySchemes": {
      "light_oauth2": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://localhost:8888/oauth2/code",
            "scopes": {
              "oauth.client.w": "write oauth client",
              "oauth.client.r": "read oauth client",
              "oauth.key.w": "write key",
              "oauth.key.r": "read key",
              "oauth.refresh_token.w": "write oauth refresh token",
              "oauth.refresh_token.r": "read oauth refresh token",
              "oauth.service.w": "write oauth service",
              "oauth.service.r": "read oauth service",
              "oauth.user.w": "write user",
              "oauth.user.r": "read user"
            }
          }
        }
      }
    },
    "schemas": {
      "Client": {
        "type": "object",
        "required": [
          "clientType",
          "clientProfile",
          "clientName",
          "clientDesc",
          "ownerId",
          "scope"
        ],
        "properties": {
          "clientId": {
            "type": "string",
            "description": "a unique client id"
          },
          "clientSecret": {
            "type": "string",
            "description": "client secret"
          },
          "clientType": {
            "type": "string",
            "description": "client type",
            "enum": [
              "confidential",
              "public",
              "trusted",
              "external"
            ]
          },
          "clientProfile": {
            "type": "string",
            "description": "client profile",
            "enum": [
              "webserver",
              "browser",
              "mobile",
              "service",
              "batch"
            ]
          },
          "clientName": {
            "type": "string",
            "description": "client name"
          },
          "clientDesc": {
            "type": "string",
            "description": "client description"
          },
          "ownerId": {
            "type": "string",
            "description": "client owner id"
          },
          "scope": {
            "type": "string",
            "description": "client scope separated by space"
          },
          "customClaim": {
            "type": "string",
            "description": "custom claim string in JSON format"
          },
          "redirectUri": {
            "type": "string",
            "description": "redirect uri"
          },
          "createDt": {
            "type": "string",
            "format": "date-time",
            "description": "create date time"
          },
          "updateDt": {
            "type": "string",
            "format": "date-time",
            "description": "update date time"
          }
        }
      },
      "Key": {
        "type": "object",
        "required": [
          "keyId",
          "certificate"
        ],
        "properties": {
          "keyId": {
            "type": "string",
            "description": "a unique id"
          },
          "certificate": {
            "type": "string",
            "description": "certificate"
          }
        }
      },
      "RefreshToken": {
        "type": "object",
        "required": [
          "refreshToken",
          "userId",
          "clientId"
        ],
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "refresh token"
          },
          "userId": {
            "type": "string",
            "description": "user id"
          },
          "clientId": {
            "type": "string",
            "description": "client id"
          },
          "scope": {
            "type": "string",
            "description": "service scopes separated by space"
          }
        }
      },
      "Service": {
        "type": "object",
        "required": [
          "serviceId",
          "serviceName",
          "serviceType",
          "scope"
        ],
        "properties": {
          "serviceId": {
            "type": "string",
            "description": "a unique service id"
          },
          "serviceType": {
            "type": "string",
            "description": "service type",
            "enum": [
              "ms",
              "api"
            ]
          },
          "serviceName": {
            "type": "string",
            "description": "service name"
          },
          "serviceDesc": {
            "type": "string",
            "description": "service description"
          },
          "ownerId": {
            "type": "string",
            "description": "service owner userId"
          },
          "scope": {
            "type": "string",
            "description": "service scopes separated by space"
          },
          "createDt": {
            "type": "string",
            "format": "date-time",
            "description": "create date time"
          },
          "updateDt": {
            "type": "string",
            "format": "date-time",
            "description": "update date time"
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "userId",
          "userType",
          "firstName",
          "lastName",
          "email"
        ],
        "properties": {
          "userId": {
            "type": "string",
            "description": "a unique id"
          },
          "userType": {
            "type": "string",
            "description": "user type",
            "enum": [
              "admin",
              "employee",
              "customer",
              "partner"
            ]
          },
          "firstName": {
            "type": "string",
            "description": "first name"
          },
          "lastName": {
            "type": "string",
            "description": "last name"
          },
          "email": {
            "type": "string",
            "description": "email address"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "password"
          },
          "passwordConfirm": {
            "type": "string",
            "format": "password",
            "description": "password confirm"
          },
          "createDt": {
            "type": "string",
            "format": "date-time",
            "description": "create date time"
          },
          "updateDt": {
            "type": "string",
            "format": "date-time",
            "description": "update date time"
          }
        }
      },
      "Password": {
        "type": "object",
        "required": [
          "password",
          "newPassword",
          "newPasswordConfirm"
        ],
        "properties": {
          "password": {
            "type": "string",
            "format": "password",
            "description": "existing password"
          },
          "newPassword": {
            "type": "string",
            "format": "password",
            "description": "new password"
          },
          "newPasswordConfirm": {
            "type": "string",
            "format": "password",
            "description": "new password confirm"
          }
        }
      }
    }
  }
}